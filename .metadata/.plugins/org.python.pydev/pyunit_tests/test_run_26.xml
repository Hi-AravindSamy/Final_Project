<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<?pydev-testrun version="1.0"?><pydev-testsuite>
    <summary errors="0" failures="1" finished="true" name="Test Run: 26" tests="2" total_time="Finished in: 22.80 secs."/>
    <test location="C:\Users\Aravi\Automation\FinalProject\CapstonePy\test_my_script.py" status="ok" test="test_scenario_1" time="2.60">
        <stdout/>
        <stderr/>
    </test>
    <test location="C:\Users\Aravi\Automation\FinalProject\CapstonePy\test_my_script.py" status="fail" test="test_scenario_2" time="14.40">
        <stdout/>
        <stderr><![CDATA[browser = <selenium.webdriver.chrome.webdriver.WebDriver (session="b2c391c393c7946b83e62ae56e269534")>

    def test_scenario_2(browser):
        url = "https://www.flipkart.com/"
        browser.get(url)
    
        wait = WebDriverWait(browser, 10)
    
        # Click on the Login button
>       login_button = wait.until(EC.element_to_be_clickable((By.XPATH, "//a[@class='_1krdK5 vbCXhM']")))

test_my_script.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <selenium.webdriver.support.wait.WebDriverWait (session="b2c391c393c7946b83e62ae56e269534")>
method = <function element_to_be_clickable.<locals>._predicate at 0x00000202D438E7A0>
message = ''

    def until(self, method: Callable[[WebDriver], Union[Literal[False], T]], message: str = "") -> T:
        """Calls the method provided with the driver as an argument until the \
        return value does not evaluate to ``False``.
    
        :param method: callable(WebDriver)
        :param message: optional message for :exc:`TimeoutException`
        :returns: the result of the last call to `method`
        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            time.sleep(self._poll)
            if time.monotonic() > end_time:
                break
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message:

..\..\..\AppData\Local\Programs\Python\Python312\Lib\site-packages\selenium\webdriver\support\wait.py:101: TimeoutException]]></stderr>
    </test>
    <launch mode="run">
        <launch_memento><![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<launchConfiguration local="true" path="CapstonePy test_my_script.py"/>
]]></launch_memento>
    </launch>
</pydev-testsuite>
